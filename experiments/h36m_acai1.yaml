GPUS : '0' # indices of gpus available on servers. CPU mode is not available, only GPU!
PRINT_FREQ : 50 # frequency of printing statistics or any other stuff
OUTPUT_DIR : 'output/acai_full' # path from the root folder to the save folder
SAVE_EVERY_EPOCH : False

MODELS : # NN-models to create
  ae: # network name that will be used in the experiment
    DIR : 'acai' # file in 'lib/models/<DIR>.py' where the model lies
    ARCH : 'AES' # name of the NN-model class to initialize
    PARAMS : # all attributes in the __init__ of the model class
      latent_dim : 16
      img_shape :
        - 17
        - 3
      layers_dim : 256
      nb_layers : 4 # for encoder and decoder each, counting input and output layers
      dropout : 0
    
  critic: # network name that will be used in the experiment
    DIR : 'acai' # file in 'lib/models/<DIR>.py' where the model lies
    ARCH : 'CRITIC' # name of the NN-model class to initialize
    PARAMS : # all attributes in the __init__ of the model class
      latent_dim : 16
      img_shape :
        - 17
        - 3
      layers_dim : 256
      nb_layers : 4 # for encoder and decoder each, counting input and output layers
      dropout : 0

LOSSES : # loss functions to create 
  ae_loss : 
    DIR : 'acai_loss' # file in 'lib/losses/<DIR>.py' where the loss class lies
    NAME : 'AcaiAeLoss' # name of the NN-loss class to initialize
    PARAMS :
      criterion : 'L2'
      ae_reg_coef: 0
  
  c_loss : 
    DIR : 'acai_loss'
    NAME : 'AcaiCriticLoss' 
    PARAMS :
      stabilizer_coef : 0.05
  
  mpjpe_loss :
    DIR : 'joints_loss'
    NAME : 'MPJPE'

  aeSplitTrain_loss :
    DIR : 'joints_loss'
    NAME : 'GetLoss'

  aeSplitValid_loss :
    DIR : 'joints_loss'
    NAME : 'GetLoss'

OPTIM : # optimizers to use
  ae : # must coincide with the name of the network!
    NAME : 'Adam' # torch.optim.<NAME>
    PARAMS :
      lr : 0.01

  critic : # must coincide with the name of the network!
    NAME : 'Adam' # torch.optim.<NAME>
    PARAMS :
      lr : 0.01

DATASETS : # datasets to initialize
  train : # name of the dataset that will be used in the experiment
    DIR : 'h36m_3d' # file in 'lib/datasets/<DIR>.py' where the dataset class lies
    NAME : 'H36M' # name of the dataset class to initialize
    PARAMS :
      subjects : ['S1','S5', 'S6', 'S7', 'S8',]
      shuffle : True
      seed : 1234
      skip_frames : 10 # (for both train and valid)
      augmentations : {
          'rotate' : {
              'max_angle' : 30
          },
          'flip' : True,
      }

  valid : 
    DIR : 'h36m_3d'
    NAME : 'H36M'
    PARAMS :
      subjects : ['S9', 'S11']
      shuffle : True
      seed : 1234
      skip_frames : 10 # (for both train and valid)

DATALOAD : # dataloaders to iterate over dataset
  train : # must coincide with the name of dataset
    NUM_ITERATIONS_PER_EPOCH : 1000 # len(dataloader) == NUM_ITERATIONS, not len(dataloader(dataset)) as usual
    PARAMS :
      shuffle : True
      batch_size : 64 # ACAI only use half for reconstruction, the other half is for interpolation
      num_workers : 5
      drop_last : True
  valid :
    #NUM_ITERATIONS_PER_EPOCH : 100
    PARAMS :
      shuffle : False
      batch_size : 64 # ACAI only use half for reconstruction, the other half is for interpolation
      num_workers : 5
      drop_last : True

TRAINING : # experiment specifications
  END_EPOCH : 300 
  # RESUME :
  #   LOAD_MODELS_ONLY : True # if True load weights as initialization, "fine-tuning" mode
  #   CKPT : '/path/to/saved/model.pth' # path where the pretrained model lies

valid_first : True
PROCEDURE : 'proc_ae_acai' # file 'lib/procedures/procedures/<PROCEDURE>.py' where train() and valid() are specified

EXP_NAME : 'acai_latentS16_fc256_layer4_300ep_iter1000_L0p' 